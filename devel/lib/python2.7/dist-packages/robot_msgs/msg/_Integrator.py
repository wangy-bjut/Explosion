# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/Integrator.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_msgs.msg

class Integrator(genpy.Message):
  _md5sum = "605f26ed16563eb16c6f892df92d7968"
  _type = "robot_msgs/Integrator"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string point_name
string time
robot_msgs/chasis chasis
robot_msgs/camera camera
robot_msgs/gas_result gas
robot_msgs/temp_result temp
robot_msgs/recognition_result recognition
================================================================================
MSG: robot_msgs/chasis
robot_msgs/robot_pose pose
robot_msgs/robot_cmd cmd
================================================================================
MSG: robot_msgs/robot_pose
float32 x
float32 y
float32 yaw
================================================================================
MSG: robot_msgs/robot_cmd
float32 linear
float32 angular
================================================================================
MSG: robot_msgs/camera
robot_msgs/cloud_angletims angle
robot_msgs/cloud_control control 
================================================================================
MSG: robot_msgs/cloud_angletims
float32 yaw
float32 pitch
================================================================================
MSG: robot_msgs/cloud_control
string direction
float64 angular_percent
bool zero
bool scrub
bool light
================================================================================
MSG: robot_msgs/gas_result
float32 result
================================================================================
MSG: robot_msgs/temp_result
float64 result
================================================================================
MSG: robot_msgs/recognition_result
float64 result
string picture_path"""
  __slots__ = ['point_name','time','chasis','camera','gas','temp','recognition']
  _slot_types = ['string','string','robot_msgs/chasis','robot_msgs/camera','robot_msgs/gas_result','robot_msgs/temp_result','robot_msgs/recognition_result']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point_name,time,chasis,camera,gas,temp,recognition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Integrator, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point_name is None:
        self.point_name = ''
      if self.time is None:
        self.time = ''
      if self.chasis is None:
        self.chasis = robot_msgs.msg.chasis()
      if self.camera is None:
        self.camera = robot_msgs.msg.camera()
      if self.gas is None:
        self.gas = robot_msgs.msg.gas_result()
      if self.temp is None:
        self.temp = robot_msgs.msg.temp_result()
      if self.recognition is None:
        self.recognition = robot_msgs.msg.recognition_result()
    else:
      self.point_name = ''
      self.time = ''
      self.chasis = robot_msgs.msg.chasis()
      self.camera = robot_msgs.msg.camera()
      self.gas = robot_msgs.msg.gas_result()
      self.temp = robot_msgs.msg.temp_result()
      self.recognition = robot_msgs.msg.recognition_result()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.point_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.chasis.pose.x, _x.chasis.pose.y, _x.chasis.pose.yaw, _x.chasis.cmd.linear, _x.chasis.cmd.angular, _x.camera.angle.yaw, _x.camera.angle.pitch))
      _x = self.camera.control.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3Bf2d().pack(_x.camera.control.angular_percent, _x.camera.control.zero, _x.camera.control.scrub, _x.camera.control.light, _x.gas.result, _x.temp.result, _x.recognition.result))
      _x = self.recognition.picture_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.chasis is None:
        self.chasis = robot_msgs.msg.chasis()
      if self.camera is None:
        self.camera = robot_msgs.msg.camera()
      if self.gas is None:
        self.gas = robot_msgs.msg.gas_result()
      if self.temp is None:
        self.temp = robot_msgs.msg.temp_result()
      if self.recognition is None:
        self.recognition = robot_msgs.msg.recognition_result()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.chasis.pose.x, _x.chasis.pose.y, _x.chasis.pose.yaw, _x.chasis.cmd.linear, _x.chasis.cmd.angular, _x.camera.angle.yaw, _x.camera.angle.pitch,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.control.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.control.direction = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.camera.control.angular_percent, _x.camera.control.zero, _x.camera.control.scrub, _x.camera.control.light, _x.gas.result, _x.temp.result, _x.recognition.result,) = _get_struct_d3Bf2d().unpack(str[start:end])
      self.camera.control.zero = bool(self.camera.control.zero)
      self.camera.control.scrub = bool(self.camera.control.scrub)
      self.camera.control.light = bool(self.camera.control.light)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognition.picture_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.recognition.picture_path = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.point_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.chasis.pose.x, _x.chasis.pose.y, _x.chasis.pose.yaw, _x.chasis.cmd.linear, _x.chasis.cmd.angular, _x.camera.angle.yaw, _x.camera.angle.pitch))
      _x = self.camera.control.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d3Bf2d().pack(_x.camera.control.angular_percent, _x.camera.control.zero, _x.camera.control.scrub, _x.camera.control.light, _x.gas.result, _x.temp.result, _x.recognition.result))
      _x = self.recognition.picture_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.chasis is None:
        self.chasis = robot_msgs.msg.chasis()
      if self.camera is None:
        self.camera = robot_msgs.msg.camera()
      if self.gas is None:
        self.gas = robot_msgs.msg.gas_result()
      if self.temp is None:
        self.temp = robot_msgs.msg.temp_result()
      if self.recognition is None:
        self.recognition = robot_msgs.msg.recognition_result()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.point_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.point_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.chasis.pose.x, _x.chasis.pose.y, _x.chasis.pose.yaw, _x.chasis.cmd.linear, _x.chasis.cmd.angular, _x.camera.angle.yaw, _x.camera.angle.pitch,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.control.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.control.direction = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.camera.control.angular_percent, _x.camera.control.zero, _x.camera.control.scrub, _x.camera.control.light, _x.gas.result, _x.temp.result, _x.recognition.result,) = _get_struct_d3Bf2d().unpack(str[start:end])
      self.camera.control.zero = bool(self.camera.control.zero)
      self.camera.control.scrub = bool(self.camera.control.scrub)
      self.camera.control.light = bool(self.camera.control.light)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognition.picture_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.recognition.picture_path = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_d3Bf2d = None
def _get_struct_d3Bf2d():
    global _struct_d3Bf2d
    if _struct_d3Bf2d is None:
        _struct_d3Bf2d = struct.Struct("<d3Bf2d")
    return _struct_d3Bf2d
