// Generated by gencpp from file robot_msgs/Integrator.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_INTEGRATOR_H
#define ROBOT_MSGS_MESSAGE_INTEGRATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/chasis.h>
#include <robot_msgs/camera.h>
#include <robot_msgs/gas_result.h>
#include <robot_msgs/temp_result.h>
#include <robot_msgs/recognition_result.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct Integrator_
{
  typedef Integrator_<ContainerAllocator> Type;

  Integrator_()
    : point_name()
    , time()
    , chasis()
    , camera()
    , gas()
    , temp()
    , recognition()  {
    }
  Integrator_(const ContainerAllocator& _alloc)
    : point_name(_alloc)
    , time(_alloc)
    , chasis(_alloc)
    , camera(_alloc)
    , gas(_alloc)
    , temp(_alloc)
    , recognition(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _point_name_type;
  _point_name_type point_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef  ::robot_msgs::chasis_<ContainerAllocator>  _chasis_type;
  _chasis_type chasis;

   typedef  ::robot_msgs::camera_<ContainerAllocator>  _camera_type;
  _camera_type camera;

   typedef  ::robot_msgs::gas_result_<ContainerAllocator>  _gas_type;
  _gas_type gas;

   typedef  ::robot_msgs::temp_result_<ContainerAllocator>  _temp_type;
  _temp_type temp;

   typedef  ::robot_msgs::recognition_result_<ContainerAllocator>  _recognition_type;
  _recognition_type recognition;





  typedef boost::shared_ptr< ::robot_msgs::Integrator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Integrator_<ContainerAllocator> const> ConstPtr;

}; // struct Integrator_

typedef ::robot_msgs::Integrator_<std::allocator<void> > Integrator;

typedef boost::shared_ptr< ::robot_msgs::Integrator > IntegratorPtr;
typedef boost::shared_ptr< ::robot_msgs::Integrator const> IntegratorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Integrator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Integrator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Integrator_<ContainerAllocator1> & lhs, const ::robot_msgs::Integrator_<ContainerAllocator2> & rhs)
{
  return lhs.point_name == rhs.point_name &&
    lhs.time == rhs.time &&
    lhs.chasis == rhs.chasis &&
    lhs.camera == rhs.camera &&
    lhs.gas == rhs.gas &&
    lhs.temp == rhs.temp &&
    lhs.recognition == rhs.recognition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Integrator_<ContainerAllocator1> & lhs, const ::robot_msgs::Integrator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Integrator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Integrator_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Integrator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Integrator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Integrator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Integrator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Integrator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "605f26ed16563eb16c6f892df92d7968";
  }

  static const char* value(const ::robot_msgs::Integrator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x605f26ed16563eb1ULL;
  static const uint64_t static_value2 = 0x6c6f892df92d7968ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Integrator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Integrator";
  }

  static const char* value(const ::robot_msgs::Integrator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Integrator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string point_name\n"
"string time\n"
"robot_msgs/chasis chasis\n"
"robot_msgs/camera camera\n"
"robot_msgs/gas_result gas\n"
"robot_msgs/temp_result temp\n"
"robot_msgs/recognition_result recognition\n"
"================================================================================\n"
"MSG: robot_msgs/chasis\n"
"robot_msgs/robot_pose pose\n"
"robot_msgs/robot_cmd cmd\n"
"================================================================================\n"
"MSG: robot_msgs/robot_pose\n"
"float32 x\n"
"float32 y\n"
"float32 yaw\n"
"================================================================================\n"
"MSG: robot_msgs/robot_cmd\n"
"float32 linear\n"
"float32 angular\n"
"================================================================================\n"
"MSG: robot_msgs/camera\n"
"robot_msgs/cloud_angletims angle\n"
"robot_msgs/cloud_control control \n"
"================================================================================\n"
"MSG: robot_msgs/cloud_angletims\n"
"float32 yaw\n"
"float32 pitch\n"
"================================================================================\n"
"MSG: robot_msgs/cloud_control\n"
"string direction\n"
"float64 angular_percent\n"
"bool zero\n"
"bool scrub\n"
"bool light\n"
"================================================================================\n"
"MSG: robot_msgs/gas_result\n"
"float32 result\n"
"================================================================================\n"
"MSG: robot_msgs/temp_result\n"
"float64 result\n"
"================================================================================\n"
"MSG: robot_msgs/recognition_result\n"
"float64 result\n"
"string picture_path\n"
;
  }

  static const char* value(const ::robot_msgs::Integrator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Integrator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_name);
      stream.next(m.time);
      stream.next(m.chasis);
      stream.next(m.camera);
      stream.next(m.gas);
      stream.next(m.temp);
      stream.next(m.recognition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Integrator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Integrator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Integrator_<ContainerAllocator>& v)
  {
    s << indent << "point_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.point_name);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "chasis: ";
    s << std::endl;
    Printer< ::robot_msgs::chasis_<ContainerAllocator> >::stream(s, indent + "  ", v.chasis);
    s << indent << "camera: ";
    s << std::endl;
    Printer< ::robot_msgs::camera_<ContainerAllocator> >::stream(s, indent + "  ", v.camera);
    s << indent << "gas: ";
    s << std::endl;
    Printer< ::robot_msgs::gas_result_<ContainerAllocator> >::stream(s, indent + "  ", v.gas);
    s << indent << "temp: ";
    s << std::endl;
    Printer< ::robot_msgs::temp_result_<ContainerAllocator> >::stream(s, indent + "  ", v.temp);
    s << indent << "recognition: ";
    s << std::endl;
    Printer< ::robot_msgs::recognition_result_<ContainerAllocator> >::stream(s, indent + "  ", v.recognition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_INTEGRATOR_H
