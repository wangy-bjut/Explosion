// Generated by gencpp from file robot_msgs/chasis.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_CHASIS_H
#define ROBOT_MSGS_MESSAGE_CHASIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/robot_pose.h>
#include <robot_msgs/robot_cmd.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct chasis_
{
  typedef chasis_<ContainerAllocator> Type;

  chasis_()
    : pose()
    , cmd()  {
    }
  chasis_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_msgs::robot_pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::robot_msgs::robot_cmd_<ContainerAllocator>  _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::robot_msgs::chasis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::chasis_<ContainerAllocator> const> ConstPtr;

}; // struct chasis_

typedef ::robot_msgs::chasis_<std::allocator<void> > chasis;

typedef boost::shared_ptr< ::robot_msgs::chasis > chasisPtr;
typedef boost::shared_ptr< ::robot_msgs::chasis const> chasisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::chasis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::chasis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::chasis_<ContainerAllocator1> & lhs, const ::robot_msgs::chasis_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::chasis_<ContainerAllocator1> & lhs, const ::robot_msgs::chasis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::chasis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::chasis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::chasis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::chasis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::chasis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::chasis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::chasis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3692867e47a9cfbea9dd44466659fd6d";
  }

  static const char* value(const ::robot_msgs::chasis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3692867e47a9cfbeULL;
  static const uint64_t static_value2 = 0xa9dd44466659fd6dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::chasis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/chasis";
  }

  static const char* value(const ::robot_msgs::chasis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::chasis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/robot_pose pose\n"
"robot_msgs/robot_cmd cmd\n"
"================================================================================\n"
"MSG: robot_msgs/robot_pose\n"
"float32 x\n"
"float32 y\n"
"float32 yaw\n"
"================================================================================\n"
"MSG: robot_msgs/robot_cmd\n"
"float32 linear\n"
"float32 angular\n"
;
  }

  static const char* value(const ::robot_msgs::chasis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::chasis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chasis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::chasis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::chasis_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::robot_msgs::robot_pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "cmd: ";
    s << std::endl;
    Printer< ::robot_msgs::robot_cmd_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_CHASIS_H
