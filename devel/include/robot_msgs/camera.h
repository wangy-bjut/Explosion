// Generated by gencpp from file robot_msgs/camera.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_CAMERA_H
#define ROBOT_MSGS_MESSAGE_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/cloud_angletims.h>
#include <robot_msgs/cloud_control.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct camera_
{
  typedef camera_<ContainerAllocator> Type;

  camera_()
    : angle()
    , control()  {
    }
  camera_(const ContainerAllocator& _alloc)
    : angle(_alloc)
    , control(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_msgs::cloud_angletims_<ContainerAllocator>  _angle_type;
  _angle_type angle;

   typedef  ::robot_msgs::cloud_control_<ContainerAllocator>  _control_type;
  _control_type control;





  typedef boost::shared_ptr< ::robot_msgs::camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::camera_<ContainerAllocator> const> ConstPtr;

}; // struct camera_

typedef ::robot_msgs::camera_<std::allocator<void> > camera;

typedef boost::shared_ptr< ::robot_msgs::camera > cameraPtr;
typedef boost::shared_ptr< ::robot_msgs::camera const> cameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::camera_<ContainerAllocator1> & lhs, const ::robot_msgs::camera_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.control == rhs.control;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::camera_<ContainerAllocator1> & lhs, const ::robot_msgs::camera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::camera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::camera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dbe9d74bdb2340b22cd82e8b27560c6";
  }

  static const char* value(const ::robot_msgs::camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dbe9d74bdb2340bULL;
  static const uint64_t static_value2 = 0x22cd82e8b27560c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/camera";
  }

  static const char* value(const ::robot_msgs::camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/cloud_angletims angle\n"
"robot_msgs/cloud_control control \n"
"================================================================================\n"
"MSG: robot_msgs/cloud_angletims\n"
"float32 yaw\n"
"float32 pitch\n"
"================================================================================\n"
"MSG: robot_msgs/cloud_control\n"
"string direction\n"
"float64 angular_percent\n"
"bool zero\n"
"bool scrub\n"
"bool light\n"
;
  }

  static const char* value(const ::robot_msgs::camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.control);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::camera_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::robot_msgs::cloud_angletims_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
    s << indent << "control: ";
    s << std::endl;
    Printer< ::robot_msgs::cloud_control_<ContainerAllocator> >::stream(s, indent + "  ", v.control);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_CAMERA_H
