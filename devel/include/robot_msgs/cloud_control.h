// Generated by gencpp from file robot_msgs/cloud_control.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_CLOUD_CONTROL_H
#define ROBOT_MSGS_MESSAGE_CLOUD_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct cloud_control_
{
  typedef cloud_control_<ContainerAllocator> Type;

  cloud_control_()
    : direction()
    , angular_percent(0.0)
    , zero(false)
    , scrub(false)
    , light(false)  {
    }
  cloud_control_(const ContainerAllocator& _alloc)
    : direction(_alloc)
    , angular_percent(0.0)
    , zero(false)
    , scrub(false)
    , light(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef double _angular_percent_type;
  _angular_percent_type angular_percent;

   typedef uint8_t _zero_type;
  _zero_type zero;

   typedef uint8_t _scrub_type;
  _scrub_type scrub;

   typedef uint8_t _light_type;
  _light_type light;





  typedef boost::shared_ptr< ::robot_msgs::cloud_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::cloud_control_<ContainerAllocator> const> ConstPtr;

}; // struct cloud_control_

typedef ::robot_msgs::cloud_control_<std::allocator<void> > cloud_control;

typedef boost::shared_ptr< ::robot_msgs::cloud_control > cloud_controlPtr;
typedef boost::shared_ptr< ::robot_msgs::cloud_control const> cloud_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::cloud_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::cloud_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::cloud_control_<ContainerAllocator1> & lhs, const ::robot_msgs::cloud_control_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.angular_percent == rhs.angular_percent &&
    lhs.zero == rhs.zero &&
    lhs.scrub == rhs.scrub &&
    lhs.light == rhs.light;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::cloud_control_<ContainerAllocator1> & lhs, const ::robot_msgs::cloud_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::cloud_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::cloud_control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::cloud_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::cloud_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::cloud_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::cloud_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::cloud_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a0daeeb4fd2f539306a2fb5b806e7f7";
  }

  static const char* value(const ::robot_msgs::cloud_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a0daeeb4fd2f539ULL;
  static const uint64_t static_value2 = 0x306a2fb5b806e7f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::cloud_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/cloud_control";
  }

  static const char* value(const ::robot_msgs::cloud_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::cloud_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string direction\n"
"float64 angular_percent\n"
"bool zero\n"
"bool scrub\n"
"bool light\n"
;
  }

  static const char* value(const ::robot_msgs::cloud_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::cloud_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.angular_percent);
      stream.next(m.zero);
      stream.next(m.scrub);
      stream.next(m.light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cloud_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::cloud_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::cloud_control_<ContainerAllocator>& v)
  {
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "angular_percent: ";
    Printer<double>::stream(s, indent + "  ", v.angular_percent);
    s << indent << "zero: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zero);
    s << indent << "scrub: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scrub);
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_CLOUD_CONTROL_H
