// Generated by gencpp from file robot_msgs/ackerman_control.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_ACKERMAN_CONTROL_H
#define ROBOT_MSGS_MESSAGE_ACKERMAN_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct ackerman_control_
{
  typedef ackerman_control_<ContainerAllocator> Type;

  ackerman_control_()
    : speed(0.0)
    , turn(0.0)  {
    }
  ackerman_control_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , turn(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _turn_type;
  _turn_type turn;





  typedef boost::shared_ptr< ::robot_msgs::ackerman_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::ackerman_control_<ContainerAllocator> const> ConstPtr;

}; // struct ackerman_control_

typedef ::robot_msgs::ackerman_control_<std::allocator<void> > ackerman_control;

typedef boost::shared_ptr< ::robot_msgs::ackerman_control > ackerman_controlPtr;
typedef boost::shared_ptr< ::robot_msgs::ackerman_control const> ackerman_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::ackerman_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::ackerman_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::ackerman_control_<ContainerAllocator1> & lhs, const ::robot_msgs::ackerman_control_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.turn == rhs.turn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::ackerman_control_<ContainerAllocator1> & lhs, const ::robot_msgs::ackerman_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::ackerman_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::ackerman_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::ackerman_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::ackerman_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::ackerman_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::ackerman_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::ackerman_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e988c63435e382a0630b5b772d96ecf7";
  }

  static const char* value(const ::robot_msgs::ackerman_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe988c63435e382a0ULL;
  static const uint64_t static_value2 = 0x630b5b772d96ecf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::ackerman_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/ackerman_control";
  }

  static const char* value(const ::robot_msgs::ackerman_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::ackerman_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed\n"
"float32 turn\n"
;
  }

  static const char* value(const ::robot_msgs::ackerman_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::ackerman_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ackerman_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::ackerman_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::ackerman_control_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "turn: ";
    Printer<float>::stream(s, indent + "  ", v.turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_ACKERMAN_CONTROL_H
