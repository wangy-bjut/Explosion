// Generated by gencpp from file robot_msgs/dgps.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_DGPS_H
#define ROBOT_MSGS_MESSAGE_DGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct dgps_
{
  typedef dgps_<ContainerAllocator> Type;

  dgps_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , by_pose0(0.0)
    , by_pose1(0.0)
    , sin_th_q1(0.0)
    , cos_th_q1(0.0)
    , sin_th(0.0)
    , cos_th(0.0)
    , bbyyy(0.0)  {
    }
  dgps_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , by_pose0(0.0)
    , by_pose1(0.0)
    , sin_th_q1(0.0)
    , cos_th_q1(0.0)
    , sin_th(0.0)
    , cos_th(0.0)
    , bbyyy(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _by_pose0_type;
  _by_pose0_type by_pose0;

   typedef double _by_pose1_type;
  _by_pose1_type by_pose1;

   typedef double _sin_th_q1_type;
  _sin_th_q1_type sin_th_q1;

   typedef double _cos_th_q1_type;
  _cos_th_q1_type cos_th_q1;

   typedef double _sin_th_type;
  _sin_th_type sin_th;

   typedef double _cos_th_type;
  _cos_th_type cos_th;

   typedef double _bbyyy_type;
  _bbyyy_type bbyyy;





  typedef boost::shared_ptr< ::robot_msgs::dgps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::dgps_<ContainerAllocator> const> ConstPtr;

}; // struct dgps_

typedef ::robot_msgs::dgps_<std::allocator<void> > dgps;

typedef boost::shared_ptr< ::robot_msgs::dgps > dgpsPtr;
typedef boost::shared_ptr< ::robot_msgs::dgps const> dgpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::dgps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::dgps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::dgps_<ContainerAllocator1> & lhs, const ::robot_msgs::dgps_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.by_pose0 == rhs.by_pose0 &&
    lhs.by_pose1 == rhs.by_pose1 &&
    lhs.sin_th_q1 == rhs.sin_th_q1 &&
    lhs.cos_th_q1 == rhs.cos_th_q1 &&
    lhs.sin_th == rhs.sin_th &&
    lhs.cos_th == rhs.cos_th &&
    lhs.bbyyy == rhs.bbyyy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::dgps_<ContainerAllocator1> & lhs, const ::robot_msgs::dgps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::dgps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::dgps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::dgps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::dgps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::dgps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::dgps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::dgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c990cbed4ebc800837d6877b60880af5";
  }

  static const char* value(const ::robot_msgs::dgps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc990cbed4ebc8008ULL;
  static const uint64_t static_value2 = 0x37d6877b60880af5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::dgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/dgps";
  }

  static const char* value(const ::robot_msgs::dgps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::dgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 by_pose0\n"
"float64 by_pose1\n"
"float64 sin_th_q1\n"
"float64 cos_th_q1\n"
"float64 sin_th\n"
"float64 cos_th\n"
"float64 bbyyy\n"
;
  }

  static const char* value(const ::robot_msgs::dgps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::dgps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.by_pose0);
      stream.next(m.by_pose1);
      stream.next(m.sin_th_q1);
      stream.next(m.cos_th_q1);
      stream.next(m.sin_th);
      stream.next(m.cos_th);
      stream.next(m.bbyyy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dgps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::dgps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::dgps_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "by_pose0: ";
    Printer<double>::stream(s, indent + "  ", v.by_pose0);
    s << indent << "by_pose1: ";
    Printer<double>::stream(s, indent + "  ", v.by_pose1);
    s << indent << "sin_th_q1: ";
    Printer<double>::stream(s, indent + "  ", v.sin_th_q1);
    s << indent << "cos_th_q1: ";
    Printer<double>::stream(s, indent + "  ", v.cos_th_q1);
    s << indent << "sin_th: ";
    Printer<double>::stream(s, indent + "  ", v.sin_th);
    s << indent << "cos_th: ";
    Printer<double>::stream(s, indent + "  ", v.cos_th);
    s << indent << "bbyyy: ";
    Printer<double>::stream(s, indent + "  ", v.bbyyy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_DGPS_H
