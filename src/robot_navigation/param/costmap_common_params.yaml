max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
#robot_radius: 0.20  # distance a circular robot should be clear of the obstacle  如果机器人是圆形，则指定机器人的半径；
footprint: [[-0.475, -0.375], [0.475, -0.375], [0.475, 0.375], [-0.475, 0.375]] # if the robot is not circular 如果机器人非圆形，则指定机器人的轮廓；

#map_type: voxel   # 地图类型；
map_type:  costmap # 地图类型；
obstacle_layer:
#Global Filtering Parameters
  max_obstacle_height: 1.0 #考虑的最大障碍物高度；
  obstacle_range: 3.0 # 添加障碍物范围，一方面考虑激光范围，另外范围越大越耗计算资源；
  raytrace_range: 4.0 # 清除障碍物范围；
#ObstacleCostmapPlugin 
  track_unknown_space:  true   #禁止全局路径规划穿越未知区域； #true needed for disabling global path planning through unknown space
  footprint_clearing_enabled: false
#VoxelCostmapPlugin 
  origin_z: 0 #(double, default: 0.0)
  z_resolution: 0.1 #(double, default: 0.2)
  z_voxels: 20 #(int, default: 10)
  unknown_threshold: 0 #(int, default: ~<name>/z_voxels)
  mark_threshold: 0 #(int, default: 0)
  publish_voxel_map: false #(bool, default: false)
  footprint_clearing_enabled: true #(bool, default: true)
  
  combination_method: 1
  enabled: true   # 使能障碍物层；

#Sensor management parameters  
  observation_sources: scan #ultrasonic
  # bump:
  #   data_type: PointCloud2
  #   topic: /kinect_camera/depth/points
  #   sensor_frame: kinect_frame_optical
  #   observation_persistence: 0
  #   expected_update_rate: 0 #(double, default: 0.0)
  #   marking: true
  #   clearing: true
  #   min_obstacle_height: 0.0  
  #   max_obstacle_height: 1.0
  #   obstacle_range: 4
  #   raytrace_range: 4
  #   inf_is_valid: false 
  # for debugging only, let's you see the entire voxel grid

  scan:
    data_type: LaserScan   # scan数据类型；
    topic:  scan     # scan的话题名称；
    sensor_frame: laser_link #he urdf bao chi yi zhi
    observation_persistence: 0
    expected_update_rate: 0 #(double, default: 0.0)
    marking: true  # 是否根据scan添加障碍物；
    clearing: true   # 是否根据scan清除障碍物；
    min_obstacle_height: 0.0  # scan检测到的最小有效障碍物高度；
    max_obstacle_height: 1.0 # scan检测到的最大有效障碍物高度；
    obstacle_range: 8.0
    raytrace_range : 8.0
    inf_is_valid: false # scan的无穷远数据是否有效；

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled: true  # 是否使能膨胀层；
  cost_scaling_factor:  10.0  # exponential rate at which the obstacle cost drops off (default: 10)	 膨胀层的指数衰减速度，值越小衰减越慢(default: 10);
  inflation_radius:     0.30  # max. distance from an obstacle at which costs are incurred for planning paths.#最大有效膨胀半径，即安装指数衰减扩张的最大半径，计算障碍物cos函数时使用。
# 静态层参数配置
static_layer:
  enabled: true  # 是否使用静态层；
  

